package com.dehradun.cabbooking.entity;

import com.dehradun.cabbooking.enums.UserStatus;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.EnumType;
import jakarta.persistence.Enumerated;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.OneToMany;
import jakarta.persistence.Table;
import java.time.LocalDateTime;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;

/**
 * Represents a rider registered to hail cabs within Dehradun.
 */
@Entity
@Table(name = "users")
public class User {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "user_id")
    private Long userId;

    @Column(name = "name", nullable = false, length = 100)
    private String name;

    @Column(name = "phone", nullable = false, length = 15, unique = true)
    private String phone;

    @Column(name = "email", length = 100, unique = true)
    private String email;

    @Column(name = "password_hash", nullable = false, length = 200)
    private String passwordHash;

    @Enumerated(EnumType.STRING)
    @Column(name = "status", length = 20, nullable = false)
    private UserStatus status = UserStatus.ACTIVE;

    @Column(name = "deleted", nullable = false)
    private boolean deleted = false;

    @Column(name = "created_at")
    private LocalDateTime createdAt;

    @Column(name = "updated_at")
    private OffsetDateTime updatedAt;

    @OneToMany(mappedBy = "user")
    private List<Ride> rides = new ArrayList<>();

    /**
     * Retrieves the unique identifier of the rider.
     *
     * @return the primary key for the user row
     */
    public Long getUserId() {
        return userId;
    }

    /**
     * Updates the unique identifier of the rider.
     *
     * @param userId identifier generated by the database
     */
    public void setUserId(Long userId) {
        this.userId = userId;
    }

    /**
     * Accesses the full name provided by the rider.
     *
     * @return the display name of the rider
     */
    public String getName() {
        return name;
    }

    /**
     * Sets the full name for the rider profile.
     *
     * @param name textual representation of the rider's name
     */
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Provides the registered phone number for the rider.
     *
     * @return the contact number stored in the profile
     */
    public String getPhone() {
        return phone;
    }

    /**
     * Updates the registered phone number for the rider.
     *
     * @param phone phone number formatted according to Indian dialing rules
     */
    public void setPhone(String phone) {
        this.phone = phone;
    }

    /**
     * Returns the email address associated with the rider.
     *
     * @return optional email string
     */
    public String getEmail() {
        return email;
    }

    /**
     * Sets the email address for notifications.
     *
     * @param email rider email value
     */
    public void setEmail(String email) {
        this.email = email;
    }

    /**
     * Fetches the salted password hash for the rider.
     *
     * @return encrypted credential data
     */
    public String getPasswordHash() {
        return passwordHash;
    }

    /**
     * Stores the salted password hash derived during registration.
     *
     * @param passwordHash hashed credential string
     */
    public void setPasswordHash(String passwordHash) {
        this.passwordHash = passwordHash;
    }

    /**
     * Obtains the current status of the rider.
     *
     * @return status enumeration
     */
    public UserStatus getStatus() {
        return status;
    }

    /**
     * Defines the operational status of the rider.
     *
     * @param status new profile status flag
     */
    public void setStatus(UserStatus status) {
        this.status = status;
    }

    /**
     * Checks whether the user has been soft deleted.
     *
     * @return true when the account is marked as removed
     */
    public boolean isDeleted() {
        return deleted;
    }

    /**
     * Marks the account as logically removed from active use.
     *
     * @param deleted true when the user should be hidden
     */
    public void setDeleted(boolean deleted) {
        this.deleted = deleted;
    }

    /**
     * Reads the timestamp when the profile was created.
     *
     * @return creation timestamp recorded by the platform
     */
    public LocalDateTime getCreatedAt() {
        return createdAt;
    }

    /**
     * Persists the timestamp representing when the profile was created.
     *
     * @param createdAt moment of profile creation
     */
    public void setCreatedAt(LocalDateTime createdAt) {
        this.createdAt = createdAt;
    }

    /**
     * Supplies the timestamp of the last profile update.
     *
     * @return last modification moment
     */
    public OffsetDateTime getUpdatedAt() {
        return updatedAt;
    }

    /**
     * Captures the timestamp when the profile was last modified.
     *
     * @param updatedAt time of most recent update
     */
    public void setUpdatedAt(OffsetDateTime updatedAt) {
        this.updatedAt = updatedAt;
    }

    /**
     * Exposes the rides taken by the rider.
     *
     * @return list of associated ride entities
     */
    public List<Ride> getRides() {
        return rides;
    }

    /**
     * Assigns the ride collection representing the rider's history.
     *
     * @param rides rides requested by the rider
     */
    public void setRides(List<Ride> rides) {
        this.rides = rides;
    }
}
